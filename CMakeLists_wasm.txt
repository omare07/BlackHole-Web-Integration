cmake_minimum_required(VERSION 3.10)

project(BlackholeWASM)

# Set C++17 standard
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Emscripten-specific settings
set(CMAKE_EXECUTABLE_SUFFIX ".html")

# Set up ImGui for WebAssembly
set(IMGUI_DIR ${CMAKE_CURRENT_SOURCE_DIR}/libs/imgui)
set(IMGUI_SOURCES
    ${IMGUI_DIR}/imgui.cpp
    ${IMGUI_DIR}/imgui_demo.cpp
    ${IMGUI_DIR}/imgui_draw.cpp
    ${IMGUI_DIR}/imgui_tables.cpp
    ${IMGUI_DIR}/imgui_widgets.cpp
    ${IMGUI_DIR}/backends/imgui_impl_glfw.cpp
    ${IMGUI_DIR}/backends/imgui_impl_opengl3.cpp
)

# Include directories
include_directories(${IMGUI_DIR})
include_directories(${IMGUI_DIR}/backends)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/libs/stb)

# Add source files - using WebAssembly main
file(GLOB SRC_FILES
    "${PROJECT_SOURCE_DIR}/src/main_wasm.cpp"
    "${PROJECT_SOURCE_DIR}/src/render.cpp"
    "${PROJECT_SOURCE_DIR}/src/shader.cpp"
    "${PROJECT_SOURCE_DIR}/src/texture.cpp"
    "${PROJECT_SOURCE_DIR}/src/stb_image.cpp"
    "${PROJECT_SOURCE_DIR}/src/GLDebugMessageCallback.cc"
)

# Create executable
add_executable(${CMAKE_PROJECT_NAME} ${SRC_FILES} ${IMGUI_SOURCES})

# Compiler definitions
target_compile_definitions(${CMAKE_PROJECT_NAME} PRIVATE 
    GLM_ENABLE_EXPERIMENTAL
    IMGUI_IMPL_OPENGL_ES3
    __EMSCRIPTEN__
)

# Emscripten-specific link flags for the REAL simulation
set(EMSCRIPTEN_LINK_FLAGS
    "-s USE_GLFW=3"
    "-s USE_WEBGL2=1"
    "-s FULL_ES3=1"
    "-s WASM=1"
    "-s ALLOW_MEMORY_GROWTH=1"
    "-s INITIAL_MEMORY=134217728"  # 128MB
    "-s MAXIMUM_MEMORY=268435456"  # 256MB
    "-s NO_EXIT_RUNTIME=1"
    "-s ASSERTIONS=1"
    "-s GL_ENABLE_GET_PROC_ADDRESS=1"
    "--preload-file ${CMAKE_SOURCE_DIR}/assets@/assets"
    "--preload-file ${CMAKE_SOURCE_DIR}/shader@/shader"
    "--shell-file ${CMAKE_SOURCE_DIR}/shell.html"
    "-s EXPORTED_FUNCTIONS=['_main']"
    "-s EXPORTED_RUNTIME_METHODS=['ccall','cwrap']"
    "-s DISABLE_EXCEPTION_CATCHING=0"
    "-O3"
    "--closure 0"
)

# Join the flags
string(REPLACE ";" " " EMSCRIPTEN_LINK_FLAGS_STR "${EMSCRIPTEN_LINK_FLAGS}")
set_target_properties(${CMAKE_PROJECT_NAME} PROPERTIES LINK_FLAGS "${EMSCRIPTEN_LINK_FLAGS_STR}")

# Ensure assets are available for preloading
add_custom_command(
    TARGET ${CMAKE_PROJECT_NAME}
    PRE_BUILD
    COMMAND ${CMAKE_COMMAND} -E make_directory "${CMAKE_BINARY_DIR}/assets"
    COMMAND ${CMAKE_COMMAND} -E copy_directory 
            "${PROJECT_SOURCE_DIR}/assets"
            "${CMAKE_BINARY_DIR}/assets")

add_custom_command(
    TARGET ${CMAKE_PROJECT_NAME}
    PRE_BUILD
    COMMAND ${CMAKE_COMMAND} -E make_directory "${CMAKE_BINARY_DIR}/shader"
    COMMAND ${CMAKE_COMMAND} -E copy_directory 
            "${PROJECT_SOURCE_DIR}/shader"
            "${CMAKE_BINARY_DIR}/shader")
